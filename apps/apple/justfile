set export
set dotenv-load

APP_NAME := "Base64"
SCHEME := APP_NAME
PROJECT := APP_NAME + ".xcodeproj"
OUTPUT := "out"
EXPORT_PATH := OUTPUT
ARCHIVE_PATH := OUTPUT / APP_NAME + ".xcarchive"
APP_PATH := OUTPUT / APP_NAME + ".app"
DMG_ICON := APP_PATH / "Contents/Resources/AppIconMacOS.icns"
MACOS_DESTINATION := "generic/platform=macOS"
MACOS_SDK := "macosx"
DMG_PATH := OUTPUT / APP_NAME + ".dmg"
RESOURCES := "Resources"
EXPORT_OPTIONS := RESOURCES / "ExportOptions.plist"
PKG_SCRIPTS := RESOURCES / "PKGScripts"
COMPONENT := RESOURCES / "Component.plist"
NOTARY_PROFILE := "AC_NOTARY_PROFILE"
PKG_INSTALL_LOCATION := "/Applications"
PAYLOAD := "payload"
PKG_PAYLOAD := PAYLOAD / "Applications"
CONFIG := "Release"

archive-mac: install-xcpretty clean-artifacts prepare-output
    #!/bin/zsh

    set -o pipefail && xcodebuild archive \
        -project "$PROJECT" \
        -scheme "$SCHEME" \
        -configuration "$CONFIG" \
        -archivePath "$ARCHIVE_PATH" \
        -sdk "$MACOS_SDK" \
        -destination "$MACOS_DESTINATION" | xcpretty

create-mac-app: install-xcpretty archive-mac
    #!/bin/zsh

    set -o pipefail && xcodebuild -exportArchive \
        -archivePath "$ARCHIVE_PATH" \
        -exportOptionsPlist "$EXPORT_OPTIONS" \
        -exportPath "$EXPORT_PATH" | xcpretty

create-pkg: install-xcpretty create-mac-app
    #!/bin/zsh

    if [[ -z "$INSTALLER_CERTIFICATE_NAME" ]]
    then
      echo "❌ INSTALLER_CERTIFICATE_NAME is empty. Set it to your 'Developer ID Installer: …' certificate name."
      security find-identity -p codesigning -v | grep "Developer ID Installer" || true
      exit 1
    fi

    mkdir -p $PKG_PAYLOAD
    cp -R "$APP_PATH" "$PKG_PAYLOAD/"

    export VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$APP_PATH/Contents/Info.plist")
    export PKG_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$APP_PATH/Contents/Info.plist")
    export PKG_PATH="$OUTPUT/$SCHEME-$VERSION.pkg"

    echo "🔏 Running codesign checks on .app..."
    codesign --verify --deep --strict --verbose=2 "$APP_PATH"

    echo "📦 Building signed .pkg..."
    typeset -a PKGBUILD_ARGS
    PKGBUILD_ARGS=(
        --root payload/Applications
        --component-plist "$COMPONENT"
        --install-location "$PKG_INSTALL_LOCATION"
        --identifier "$PKG_ID"
        --version "$VERSION"
        --sign "$INSTALLER_CERTIFICATE_NAME"
        --timestamp
    )

    if [[ -d "$PKG_SCRIPTS" ]]; then
      echo "🧩 Including installer scripts from '$PKG_SCRIPTS'"
      PKGBUILD_ARGS+=(--scripts "$PKG_SCRIPTS")
    fi

    pkgbuild "${PKGBUILD_ARGS[@]}" "$PKG_PATH"

    echo "🧾 pkg signature:"
    pkgutil --check-signature "$PKG_PATH" || exit 1

    echo "📨 Notarizing .pkg..."
    xcrun notarytool submit "$PKG_PATH" --keychain-profile "$NOTARY_PROFILE" --wait || exit 1

    echo "📎 Stapling notarization ticket to .pkg..."
    xcrun stapler staple "$PKG_PATH" || exit 1

    echo "🔍 Verifying Gatekeeper..."
    spctl --assess --type install -vv "$PKG_PATH" || exit 1
    xcrun stapler validate "$PKG_PATH" || exit 1

    echo "✅ Done"
    echo "📦 PKG: $PKG_PATH"

create-notary-profile:
    #!/bin/zsh

    xcrun notarytool store-credentials "$NOTARY_PROFILE" \
        --apple-id "$APPLE_ID_EMAIL" \
        --team-id "$APPLE_TEAM_ID" \
        --password "$APP_SPECIFIC_PASSWORD"

generate-sparkle-keys: build-mac
    #!/bin/zsh

    SPARKLE_BIN_PATH=$(just get-sparkle-binary-path | tail -n 1)
    $SPARKLE_BIN_PATH/generate_keys

bootstrap: install-tools

[private]
install-tools: install-xcpretty

[private]
install-xcpretty:
    #!/bin/zsh

    if ! command -v xcpretty &> /dev/null
    then
        echo "📦 xcpretty is not installed. Installing via Gem..."
        gem install create-dmg || exit 1
    fi

[private]
prepare-output:
    #!/bin/zsh

    mkdir -p $OUTPUT

[private]
clean-artifacts:
    #!/bin/zsh

    rm -rf $PAYLOAD $OUTPUT || exit 1

[private]
build-mac:
    #!/bin/zsh

    set -o pipefail && xcodebuild build \
        -project "$PROJECT" \
        -scheme "$SCHEME" \
        -configuration "$CONFIG" \
        -sdk "$MACOS_SDK" \
        -destination "$MACOS_DESTINATION" | xcpretty

[private]
get-sparkle-binary-path:
    #!/bin/zsh

    DERIVED_ROOT="${DERIVED_ROOT:-$HOME/Library/Developer/Xcode/DerivedData}"

    BIN_PATH=""
    if [[ -n "$SPARKLE_BIN_PATH" && -d "$SPARKLE_BIN_PATH" ]]
    then
        BIN_PATH="$SPARKLE_BIN_PATH"
    else
        BIN_PATH=$(find "$DERIVED_ROOT" -maxdepth 8 -type d \
            \( -path "*/SourcePackages/artifacts/*/bin" -o -path "*/SourcePackages/artifacts/*/*/bin" \) \
            -print -quit 2>/dev/null)
    fi

    if [[ -z "$BIN_PATH" || ! -d "$BIN_PATH" ]]
    then
        echo "❌ Sparkle tools directory not found under artifacts at: $DERIVED_ROOT" >&2
        echo "💡 Set SPARKLE_BIN_PATH to the artifacts bin or open the project to fetch packages." >&2
        exit 1
    fi

    echo "$BIN_PATH"
