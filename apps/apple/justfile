set export
set dotenv-load

APP_NAME := "Base64"
SCHEME := APP_NAME
PROJECT := APP_NAME + ".xcodeproj"
OUTPUT := "out"
ARCHIVE_PATH := OUTPUT / APP_NAME + ".xcarchive"
APP_PATH := OUTPUT / APP_NAME + ".app"
DMG_ICON := APP_PATH / "Contents/Resources/AppIconMacOS.icns"
MACOS_DESTINATION := "generic/platform=macOS"
MACOS_SDK := "macosx"
DMG_PATH := OUTPUT / APP_NAME + ".dmg"
RESOURCES := "Resources"
EXPORT_OPTIONS := RESOURCES / "ExportOptions.plist"
DMG_BACKGROUND := RESOURCES / "background.png"
NOTARY_PROFILE := "AC_NOTARY_PROFILE"

archive-mac: install-xcpretty prepare-output
    #!/bin/zsh

    export CONFIG="Release"

    set -o pipefail && xcodebuild archive \
        -project "$PROJECT" \
        -scheme "$SCHEME" \
        -configuration "$CONFIG" \
        -archivePath "$ARCHIVE_PATH" \
        -sdk "$MACOS_SDK" \
        -destination "$MACOS_DESTINATION" | xcpretty

create-mac-app: install-xcpretty prepare-output archive-mac
    #!/bin/zsh

    set -o pipefail && xcodebuild -exportArchive \
        -archivePath "$ARCHIVE_PATH" \
        -exportOptionsPlist "$EXPORT_OPTIONS" \
        -exportPath "$OUTPUT" | xcpretty

create-mac-app-zip-and-notarize: prepare-output
    #!/bin/zsh

    export VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$APP_PATH/Contents/Info.plist")
    export ZIP_PATH="$OUTPUT/$SCHEME-$VERSION.zip"

    echo "üîè Running codesign checks..."
    codesign --verify --deep --strict --verbose=2 "$APP_PATH"

    echo "üóúÔ∏è Zipping app..."
    /usr/bin/ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" "$ZIP_PATH"
    echo "üì¶ ZIP created: $ZIP_PATH"

    echo "üì® Submitting for notarization..."
    xcrun notarytool submit "$ZIP_PATH" --keychain-profile "$NOTARY_PROFILE" --wait

    echo "üìé Stapling notarization ticket..."
    xcrun stapler staple "$APP_PATH"

    echo "üîç Verifying notarization and Gatekeeper..."
    xcrun stapler validate "$APP_PATH"
    spctl --assess --type execute -vv "$APP_PATH"

    echo "üìÇ App: $APP_PATH"
    echo "üì¶ ZIP: $ZIP_PATH"

create-dmg: install-create-dmg create-mac-app
    #!/bin/zsh

    if [ -f $DMG_NAME ]
    then
        echo "üóëÔ∏è Removing existing DMG file $DMG_NAME..."
        rm $DMG_NAME
    fi

    if [ ! -d $APP_PATH ]
    then
        echo "‚ùå Error: $APP_PATH does not exist. Please build the app first."
        exit 1
    fi

    if [ ! -f $DMG_BACKGROUND ]
    then
        echo "‚ùå Error: Background image $DMG_BACKGROUND does not exist."
        exit 1
    fi

    if [ ! -f $DMG_ICON ]
    then
        echo "‚ùå Error: Icon file $DMG_ICON does not exist."
        exit 1
    fi

    echo "üíø Creating DMG for $APP_NAME..."
    create-dmg \
        --volname $APP_NAME \
        --volicon $DMG_ICON \
        --background $DMG_BACKGROUND \
        --window-pos 200 120 \
        --window-size 800 500 \
        --icon-size 128 \
        --icon "$APP_NAME.app" 200 250 \
        --app-drop-link 600 250 \
        --no-internet-enable \
        --skip-jenkins \
        $DMG_PATH \
        $APP_PATH

    if [ $? -eq 0 ]
    then
        echo "‚úÖ DMG created successfully: $APP_NAME.dmg"
    else
        echo "‚ùå Error creating DMG"
        exit 1
    fi

    echo "üéâ Done creating $APP_NAME DMG!"

create-notary-profile:
    #!/bin/zsh

    xcrun notarytool store-credentials "$NOTARY_PROFILE" \
        --apple-id "$APPLE_ID_EMAIL" \
        --team-id "$APPLE_TEAM_ID" \
        --password "$APP_SPECIFIC_PASSWORD"

bootstrap: install-tools

[private]
install-tools: install-create-dmg install-xcpretty

[private]
install-xcpretty:
    #!/bin/zsh

    if ! command -v xcpretty &> /dev/null
    then
        echo "üì¶ xcpretty is not installed. Installing via Gem..."
        gem install create-dmg || exit 1
    fi

[private]
install-create-dmg:
    #!/bin/zsh

    if ! command -v create-dmg &> /dev/null
    then
        echo "üì¶ create-dmg is not installed. Installing via Homebrew..."
        if ! command -v brew &> /dev/null
        then
            echo "‚ùå Homebrew is not installed. Please install Homebrew first: https://brew.sh/"
            exit 1
        fi

        brew install create-dmg
    fi

[private]
prepare-output:
    #!/bin/zsh

    mkdir -p $OUTPUT
